package me.lor3mipsum.next.client.impl.modules.exploit;

import me.lor3mipsum.next.api.event.world.PlaySoundEvent;
import me.lor3mipsum.next.api.event.world.WorldRenderEvent;
import me.lor3mipsum.next.api.util.misc.NextColor;
import me.lor3mipsum.next.api.util.misc.Timer;
import me.lor3mipsum.next.api.util.render.RenderUtils;
import me.lor3mipsum.next.api.util.render.color.QuadColor;
import me.lor3mipsum.next.client.core.module.Category;
import me.lor3mipsum.next.client.core.module.Module;
import me.lor3mipsum.next.client.core.module.annotation.Mod;
import me.lor3mipsum.next.client.core.setting.SettingSeparator;
import me.lor3mipsum.next.client.impl.settings.BooleanSetting;
import me.lor3mipsum.next.client.impl.settings.ColorSetting;
import me.lor3mipsum.next.client.impl.settings.DoubleSetting;
import me.lor3mipsum.next.client.impl.settings.IntegerSetting;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.sound.SoundCategory;
import net.minecraft.util.math.BlockPos;

@Mod(name = "TeleportMarker", description = "Marks the location of chorus teleports", category = Category.EXPLOIT)
public class TeleportMarker extends Module {

    public SettingSeparator generalSep = new SettingSeparator("General");

    public IntegerSetting timeout = new IntegerSetting("Timeout", 5, 1, 10);

    public SettingSeparator renderSep = new SettingSeparator("Render");

    public BooleanSetting below = new BooleanSetting("Pos Below", true);
    public ColorSetting sidesColor = new ColorSetting("Sides Color", false, new NextColor(255, 255, 255, 100));
    public ColorSetting linesColor = new ColorSetting("Lines Color", false, new NextColor(255, 255, 255, 255));
    public DoubleSetting lineWidth = new DoubleSetting("Line Width", 2.5, 0.1, 5);

    private BlockPos pos;
    private Timer timer = new Timer();

    @EventHandler
    private Listener<PlaySoundEvent> onPlaySound = new Listener<>(event -> {
        pos = new BlockPos(event.sound.getX(), event.sound.getY(), event.sound.getZ());
        timer.reset();
    }, event -> event.sound.getCategory().getName().equals(SoundCategory.PLAYERS.getName()) && event.sound.getId().getPath().equals("item.chorus_fruit.teleport"));

    @EventHandler
    private Listener<WorldRenderEvent> onWorldRender = new Listener<>(event -> {
        if (pos != null) {
            if (timer.passed(timeout.getValue() * 1000)) {
                pos = null;
                return;
            }
            RenderUtils.drawBoxBoth(below.getValue() ?  pos.down() : pos, QuadColor.single(sidesColor.getValue().getRGB()), QuadColor.single(linesColor.getValue().getRGB()), lineWidth.getValue().floatValue());
        }
    });

}
