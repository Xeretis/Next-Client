package me.lor3mipsum.next.client.impl.modules.exploit;

import me.lor3mipsum.next.client.event.EventTarget;
import me.lor3mipsum.next.client.impl.events.TickEvent;
import me.lor3mipsum.next.client.impl.events.WorldRenderEvent;
import me.lor3mipsum.next.client.impl.settings.BooleanSetting;
import me.lor3mipsum.next.client.impl.settings.ColorSetting;
import me.lor3mipsum.next.client.impl.settings.KeybindSetting;
import me.lor3mipsum.next.client.impl.settings.NumberSetting;
import me.lor3mipsum.next.client.module.Category;
import me.lor3mipsum.next.client.module.Module;
import me.lor3mipsum.next.client.utils.render.RenderUtils;
import me.lor3mipsum.next.client.utils.render.color.QuadColor;
import me.lor3mipsum.next.client.utils.world.WorldUtils;
import net.minecraft.item.BlockItem;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;
import org.lwjgl.glfw.GLFW;

import java.awt.*;

public class AirPlace extends Module {
    public NumberSetting lineWidth = new NumberSetting("LineWidth", 2.5, 0.1, 5, 0.1);
    public ColorSetting side = new ColorSetting("SidesColor", new Color(255, 255, 255, 100));
    public ColorSetting line = new ColorSetting("LinesColor", new Color(255, 255, 255, 255));
    public BooleanSetting swing = new BooleanSetting("SwingHand", true);
    public NumberSetting dist = new NumberSetting("Offset", 0, 0, 2, 1);
    public KeybindSetting keybind = new KeybindSetting(GLFW.GLFW_KEY_UNKNOWN);

    public AirPlace() {
        super("AirPlace", "Allows you to place blocks mid air", Category.EXPLOIT);
    }

    private BlockPos target;

    @EventTarget
    private void onTickEvent(TickEvent.Post event) {
        if (!(mc.crosshairTarget instanceof BlockHitResult) || !(mc.player.getMainHandStack().getItem() instanceof BlockItem)) return;

        target = ((BlockHitResult) mc.crosshairTarget).getBlockPos();

        Vec3d forward = Vec3d.fromPolar(mc.player.pitch, mc.player.yaw).normalize();

        target = target.offset(Direction.Axis.X, (int) ((dist.getNumber() + 1) * forward.getX()));
        target = target.offset(Direction.Axis.Z, (int) ((dist.getNumber() + 1) * forward.getZ()));

        if (!(mc.world.getBlockState(((BlockHitResult) mc.crosshairTarget).getBlockPos()).isAir() && mc.world.getBlockState(target).isAir())) return;

        if (mc.options.keyUse.wasPressed() || mc.options.keyUse.isPressed())
            WorldUtils.place(target, Hand.MAIN_HAND, mc.player.inventory.selectedSlot, false, swing.isOn(), true, true, true, true);
    }

    @EventTarget
    private void onWorldRenderEvent(WorldRenderEvent.Post event) {
        if (!(mc.crosshairTarget instanceof BlockHitResult)
                || !mc.world.getBlockState(((BlockHitResult) mc.crosshairTarget).getBlockPos()).isAir()
                || !mc.world.getBlockState(target).isAir()
                || !(mc.player.getMainHandStack().getItem() instanceof BlockItem))
            return;

        RenderUtils.drawBoxBoth(target, QuadColor.single(side.getValue().getRGB()), QuadColor.single(line.getValue().getRGB()), (float) lineWidth.getNumber());
    }

    @Override
    public int getKeybind() {
        return keybind.getKey();
    }

    @Override
    public void setKeybind(int keybind) {
        this.keybind.setKey(keybind);
    }
}
